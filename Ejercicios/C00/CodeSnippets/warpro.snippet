<?xml version="1.0" encoding="utf-8"?>

<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>ProductosRepositorio</Title>
			<Author>Jimmy Javier</Author>
			<Description>Agrega el repositorio Productos</Description>
			<Shortcut>warpro</Shortcut>
		</Header>
		<Snippet>						
			<Code Language="CSharp">
				<![CDATA[ 
public class ProductosRepositorio : IProductosRepositorio
    {
        private TiendaDbContext _contexto;        

        public ProductosRepositorio(TiendaDbContext contexto)
        {
            _contexto = contexto;            
        }
        public async Task<bool> Actualizar(Producto producto)
        {
            _contexto.Productos.Attach(producto);
            _contexto.Entry(producto).State = EntityState.Modified;
            try
            {
                return await _contexto.SaveChangesAsync() > 0 ? true : false;
            }
            catch (Exception excepcion)
            {
                ;
            }
            return false;
        }

        public async Task<Producto> Agregar(Producto producto)
        {
            _contexto.Productos.Add(producto);
            try
            {
                await _contexto.SaveChangesAsync();
            }
            catch (Exception excepcion)
            {
                ;
            }

            return producto;
        }

        public async Task<bool> Eliminar(int id)
        {
            //Se realiza una eliminaciÃ³n suave, solamente inactivamos el producto

            var producto = await _contexto.Productos
                                .SingleOrDefaultAsync(c => c.Id == id);

            producto.Estatus = EstatusProducto.Inactivo;
            _contexto.Productos.Attach(producto);
            _contexto.Entry(producto).State = EntityState.Modified;

            try
            {
                return (await _contexto.SaveChangesAsync() > 0 ? true : false);
            }
            catch (Exception excepcion)
            {
                ;
            }
            return false;

        }

        public async Task<Producto> ObtenerProductoAsync(int id)
        {
            return await _contexto.Productos
                               .SingleOrDefaultAsync(c => c.Id == id);
        }

        public async Task<List<Producto>> ObtenerProductosAsync()
        {
            return await _contexto.Productos.OrderBy(u => u.Nombre)
                                            .ToListAsync();
        }

        
    }
]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>

